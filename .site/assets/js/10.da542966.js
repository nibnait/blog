(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{430:function(t,_,v){"use strict";v.r(_);var a=v(65),n=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),v("p",[t._v("参考资料：")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/catalog",target:"_blank",rel:"noopener noreferrer"}},[t._v("《深入设计模式》 - https://refactoringguru.cn"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.runoob.com/design-pattern/design-pattern-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式|菜鸟教程 - RUNOOB.COM"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://bugstack.cn/md/develop/design-pattern/2022-03-12-%E9%87%8D%E5%AD%A6Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FB%E7%AB%99%E8%A7%86%E9%A2%91.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("小傅哥的《重学Java设计模式》"),v("OutboundLink")],1)])]),t._v(" "),v("h2",{attrs:{id:"面向对象程序设计简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象程序设计简介"}},[t._v("#")]),t._v(" 面向对象程序设计简介")]),t._v(" "),v("h3",{attrs:{id:"类和对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[t._v("#")]),t._v(" 类和对象")]),t._v(" "),v("h3",{attrs:{id:"抽象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[t._v("#")]),t._v(" 抽象")]),t._v(" "),v("p",[t._v("抽象是一种反映真实世界对象或现象中特定内容的模型， 它 能高精度地反映所有与特定内容相关的详细信息， 同时忽略 其他内容。"),v("br"),t._v("\n例如，商品域的商品模型 关心的是商品的类型、上下架状态、审核状态、商品详情等，供应链域的商品模型 关心的则是商品的规格（大小）、成本、产地等信息")]),t._v(" "),v("h3",{attrs:{id:"封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),v("p",[t._v("封装是指一个对象对其他对象隐藏其部分状态和行为， 而仅 向程序其他部分暴露有限的接口的能力。"),v("br"),t._v("\n启动一辆车的发动机， 你只需转动钥匙或按下按钮 即可， 无需打开引擎盖手动接线、转动曲轴和气缸并启动发 动机的动力循环。 这些细节都隐藏在引擎盖下， 你只会看到 一些简单的接口：启动开关、方向盘和一些踏板。这些接口是对象的公有部分， 能够同其 他对象进行交互。")]),t._v(" "),v("h3",{attrs:{id:"继承"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),v("p",[t._v("继承最主要的好处 是代码复用。"),v("br"),t._v("\n子类仅能对一个父类进行扩展，父类如果实现了某个接口， 那么其所有子类都 必须实现该接口。")]),t._v(" "),v("h3",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),v("p",[t._v("多态性依赖于继承。从一个父类派生出多个子类，可以使子类之间有不同的行为，这种行为称之为多态。更直白的说，就是子类重写父类的方法，使子类具有不同的方法实现。"),v("br"),t._v("\n例如 AbstractParamValidHandler，有很多子类：SpotParamValidHandler(现货商品入参校验)，PresaleParamValidHandle(预售商品入参校验)...")]),t._v(" "),v("h2",{attrs:{id:"设计模式遵循六大原则-solid-迪米特法则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式遵循六大原则-solid-迪米特法则"}},[t._v("#")]),t._v(" 设计模式遵循六⼤原则：（SOLID）+ 迪米特法则")]),t._v(" "),v("ul",[v("li",[t._v("单⼀职责（Single Responsibility Principle）：⼀个类和⽅法只做⼀件事。（抽一个xxHelper出来）")]),t._v(" "),v("li",[t._v("开闭原则（Open Close Principle）：扩展开放，修改封闭（抽象架构，扩展实现）\n"),v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/SOLID-2%E5%BC%80%E6%94%BE%E5%85%B3%E9%97%AD.jpg",alt:""}})]),t._v(" "),v("li",[t._v("⾥⽒替换（Liskov Substitution Principle）：多态，⼦类可扩展⽗类\n"),v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/SOLID-3%E9%87%8C%E5%BC%8F%E6%9B%BF%E6%8D%A2.jpg",alt:""}})]),t._v(" "),v("li",[t._v("接⼝隔离（InterfaceSegregation Principles）：最小化， 减少依赖从而降低变更的风险。\n"),v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/SOLID-4%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB.jpg",alt:""}})]),t._v(" "),v("li",[t._v("依赖倒置（Dependence Inversion Principle）：细节依赖抽象，下层依赖上层（低层次的查MySQL、查MongoDB 依赖 高层次的抽象出来的 查询repository）\n"),v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/SOLID-5%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE.jpg",alt:""}})]),t._v(" "),v("li",[t._v("迪⽶特法则（Law of Demeter）：最少知道，降低耦合")])]),t._v(" "),v("h2",{attrs:{id:"_1-创建型模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建型模式"}},[t._v("#")]),t._v(" 1. 创建型模式")]),t._v(" "),v("p",[t._v("这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("序号")]),t._v(" "),v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("图稿")]),t._v(" "),v("th",[t._v("业务场景")]),t._v(" "),v("th",[t._v("实现要点")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("工厂方法")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-01%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("多种类型商品不同 接⼝，统⼀发奖服 务搭建场景")]),t._v(" "),v("td",[t._v("定义⼀个创建对象的接⼝，让其⼦类⾃⼰决定实例化哪⼀个⼯⼚类，⼯⼚模式 使其创建过程延迟到⼦类进⾏。")])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[t._v("抽象工厂")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-02%E6%8A%BD%E8%B1%A1%E2%BC%AF%E2%BC%9A%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("替换Redis双集群 升级，代理类抽象 场景")]),t._v(" "),v("td",[t._v("提供⼀个创建⼀系列相关或相互依赖对象的接⼝，⽽⽆需指定它们具体的类。")])]),t._v(" "),v("tr",[v("td",[t._v("3")]),t._v(" "),v("td",[t._v("建造者")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-03%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("各项装修物料组合 套餐选配场景")]),t._v(" "),v("td",[t._v("将⼀个复杂的构建与其表示相分离，使 得同样的构建过程可以创建不同的表 示。")])]),t._v(" "),v("tr",[v("td",[t._v("4")]),t._v(" "),v("td",[t._v("原型")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-04%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("上机考试多套试， 每⼈题⽬和答案乱 序排列场景")]),t._v(" "),v("td",[t._v("⽤原型实例指定创建对象的种类，并且 通过拷⻉这些原型创建新的对象。")])]),t._v(" "),v("tr",[v("td",[t._v("5")]),t._v(" "),v("td",[t._v("单例")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F-05%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("7种单例模式案例，Eﬀective Java 作者推荐枚举单例模式")]),t._v(" "),v("td",[t._v("保证⼀个类仅有⼀个实例，并提供⼀个访问它的全局访问点。")])])])]),t._v(" "),v("h2",{attrs:{id:"_2-结构型模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-结构型模式"}},[t._v("#")]),t._v(" 2. 结构型模式")]),t._v(" "),v("p",[t._v("这类模式介绍如何将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("序号")]),t._v(" "),v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("图稿")]),t._v(" "),v("th",[t._v("业务场景")]),t._v(" "),v("th",[t._v("实现要点")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("适配器")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-01%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("从多个MQ消息体中， 抽取指定字段值场景")]),t._v(" "),v("td",[t._v("将⼀个类的接⼝转换成客户希望的另外⼀个接⼝。适配器模式使得原本由于接 ⼝不兼容⽽不能⼀起⼯作的那些类可以 ⼀起⼯作。")])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[t._v("桥接")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-02%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("多⽀付渠道(微信、⽀付宝)与多⽀付模式(刷脸、指纹)场景")]),t._v(" "),v("td",[t._v("将抽象部分与实现部分分离，使它们都可以独⽴的变化。")])]),t._v(" "),v("tr",[v("td",[t._v("3")]),t._v(" "),v("td",[t._v("组合")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-03%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("营销差异化⼈群发券，决策树引擎搭建场景")]),t._v(" "),v("td",[t._v('将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得⽤户对单个对象和组合对象的使⽤具有⼀致 性。')])]),t._v(" "),v("tr",[v("td",[t._v("4")]),t._v(" "),v("td",[t._v("装饰")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-04%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("SSO单点登录功能扩展，增加拦截⽤户访问⽅法范围场景")]),t._v(" "),v("td",[t._v("动态地给⼀个对象添加⼀些额外的职责。就增加功能来说，装饰器模式相⽐⽣成⼦类更为灵活。")])]),t._v(" "),v("tr",[v("td",[t._v("5")]),t._v(" "),v("td",[t._v("外观")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-05%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("基于SpringBoot开发门⾯模式中间件，统⼀控制接⼝⽩名单场景")]),t._v(" "),v("td",[t._v("为⼦系统中的⼀组接⼝提供⼀个⼀致的界⾯，外观模式定义了⼀个⾼层接⼝，这个接⼝使得这⼀⼦系统更加容易使 ⽤。")])]),t._v(" "),v("tr",[v("td",[t._v("6")]),t._v(" "),v("td",[t._v("享元")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-06%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("基于Redis秒杀，提供活动与库存信息查询场 景")]),t._v(" "),v("td",[t._v("运⽤共享技术有效地⽀持⼤量细粒度的对象。")])]),t._v(" "),v("tr",[v("td",[t._v("7")]),t._v(" "),v("td",[t._v("代理")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F-07%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟mybatis-spring中定义DAO接⼝，使⽤代理类⽅式操作数据库原 理实现场景")]),t._v(" "),v("td",[t._v("为其他对象提供⼀种代理以控制对这个对象的访问。")])])])]),t._v(" "),v("h2",{attrs:{id:"_3-行为模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-行为模式"}},[t._v("#")]),t._v(" 3. ⾏为模式")]),t._v(" "),v("p",[t._v("这类模式负责对象间的⾼效沟通和职责委派。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("序号")]),t._v(" "),v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("图稿")]),t._v(" "),v("th",[t._v("业务场景")]),t._v(" "),v("th",[t._v("实现要点")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("责任链")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-01%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟618电商⼤促 期间，项⽬上线流 程多级负责⼈审批 场景")]),t._v(" "),v("td",[t._v("避免请求发送者与接收者耦合在⼀起，让多 个对象都有可能接收请求，将这些对象连接 成⼀条链，并且沿着这条链传递请求，直到 有对象处理它为⽌。")])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[t._v("命令")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-02%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟⾼档餐厅⼋⼤菜系，⼩⼆点单厨师烹饪场景")]),t._v(" "),v("td",[t._v("将⼀个请求封装成⼀个对象，从⽽使您可以⽤不同的请求对客户进⾏参数化。")])]),t._v(" "),v("tr",[v("td",[t._v("3")]),t._v(" "),v("td",[t._v("迭代器")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-03%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟公司组织架构树结构关系，深度 迭代遍历⼈员信息输出场景")]),t._v(" "),v("td",[t._v("提供⼀种⽅法顺序访问⼀个聚合对象中各个元素, ⽽⼜⽆须暴露该对象的内部表示。")])]),t._v(" "),v("tr",[v("td",[t._v("4")]),t._v(" "),v("td",[t._v("中介者")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-04%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("按照Mybatis原理⼿写ORM框架，给JDBC⽅式操作数据库增加中介者场景")]),t._v(" "),v("td",[t._v("⽤⼀个中介对象来封装⼀系列的对象交互，中介者使各对象不需要显式地相互引⽤，从⽽使其耦合松散，⽽且可以独⽴地改变它们之间的交互。")])]),t._v(" "),v("tr",[v("td",[t._v("5")]),t._v(" "),v("td",[t._v("备忘录")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-05%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟互联⽹系统上线过程中，配置⽂件回滚场景")]),t._v(" "),v("td",[t._v("在不破坏封装性的前提下，捕获⼀个对象的内部状态，并在该对象之外保存这个状态。")])]),t._v(" "),v("tr",[v("td",[t._v("6")]),t._v(" "),v("td",[t._v("观察者")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-06%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟类似⼩客⻋车指标摇号过程，监听消息通知⽤户中签场景")]),t._v(" "),v("td",[t._v("定义对象间的⼀种⼀对多的依赖关系，当⼀个对象的状态发⽣改变时，所有依赖于它的对象都得到通知并被⾃动更新。")])]),t._v(" "),v("tr",[v("td",[t._v("7")]),t._v(" "),v("td",[t._v("状态")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-07%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟系统营销活动，状态流程审核发布上线场景")]),t._v(" "),v("td",[t._v("允许对象在内部状态发⽣改变时改变它的⾏为，对象看起来好像修改了它的类。")])]),t._v(" "),v("tr",[v("td",[t._v("8")]),t._v(" "),v("td",[t._v("策略")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-08%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟多种营销类型优惠券，折扣⾦额计算策略场景")]),t._v(" "),v("td",[t._v("定义⼀系列的算法,把它们⼀个个封装起来，并且使它们可相互替换。")])]),t._v(" "),v("tr",[v("td",[t._v("9")]),t._v(" "),v("td",[t._v("模板方法")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-09%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟爬⾍各类电商商品，⽣成营销推⼴海报场景")]),t._v(" "),v("td",[t._v("定义⼀个操作中的算法的⻣骨架，⽽将⼀些步骤延迟到⼦类中。模板⽅法使得⼦类可以不改变⼀个算法的结构即可重定义该算法的某些特定步骤。")])]),t._v(" "),v("tr",[v("td",[t._v("10")]),t._v(" "),v("td",[t._v("访问者")]),t._v(" "),v("td",[v("img",{attrs:{src:"https://tianbin.cc/img/design-pattern/design-pattern/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F-10%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.png",alt:""}})]),t._v(" "),v("td",[t._v("模拟家⻓与校⻓， 对学⽣和⽼师的不同视⻆角信息的访问场景")]),t._v(" "),v("td",[t._v("主要将数据结构与数据操作分离。")])])])])])}),[],!1,null,null,null);_.default=n.exports}}]);